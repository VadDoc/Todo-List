{"version":3,"sources":["components/Button.tsx","components/SingleInput.tsx","AddItemForm.tsx","EditableSpan.tsx","Reducers/TodoListsReducer.ts","Reducers/TasksReducer.ts","Todolist.tsx","App.tsx","serviceWorker.ts","Store/Store.ts","Reducers/FilterReducer.ts","index.tsx"],"names":["Button","callBack","props","onClick","SingleInput","title","setTitle","error","setError","type","value","onChange","e","currentTarget","onKeyPress","charCode","className","AddItemForm","addItem","buttonName","useState","callBackInput","trim","EditableSpan","editMode","setEditMode","setValue","deActivateEditMode","onDoubleClick","onBlur","autoFocus","todolistID1","v1","todolistID2","initialState","id","filter","isDone","Todolist","todolist","tasks","dispatch","useDispatch","changeFilterForButton","todolistID","classNameButton","changeTodoListTitleAC","addTaskAC","map","task","key","taskId","checked","changeTaskTitleAC","App","todolists","useSelector","state","newTodolistID","addTodoListAC","addEmptyArrayInsteadTaskAC","tasksForTodolist","t","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","f","m","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.728b6211.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\ntype propsType = DefaultButtonPropsType & {\r\n    callBack: () => void\r\n}\r\n\r\nexport const Button=({callBack, ...props}:propsType)=>{\r\n    const onClickHandler=()=>{\r\n        callBack()\r\n    }\r\n    return(\r\n        <button onClick={onClickHandler} {...props} />\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent} from 'react';\nimport {ErrorType} from \"../Todolist\";\n\ntype InputPropsType = {\n  title: string\n  setTitle: (title: string) => void\n  callBack: () => void\n  error: ErrorType\n  setError: (error: ErrorType) => void\n}\n\nexport const SingleInput = ({title, setTitle, callBack, error, setError}:InputPropsType) => {\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value)\n  }\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    setError(null);\n    if (e.charCode === 13) {\n      callBack();\n    }\n  }\n\n  return (\n    <div>\n      <input type=\"text\"\n             value={title}\n             onChange={onChangeHandler}\n             onKeyPress={onKeyPressHandler}\n             className={error ? \"error\" : \"\"}\n      />\n      {error && <div className=\"error-message\">{error}</div>}\n    </div>\n  )\n}","import React, {useState} from \"react\";\nimport {SingleInput} from \"./components/SingleInput\";\nimport {Button} from \"./components/Button\";\nimport {ErrorType} from \"./Todolist\";\n\ntype AddItemFormPropsType = {\n  addItem: (title: string) => void\n  buttonName: string\n}\n\nexport const AddItemForm = ({addItem, buttonName}: AddItemFormPropsType) => {\n  let [title, setTitle] = useState<string>(\"\")\n  let [error, setError] = useState<ErrorType>(null)\n\n  const callBackInput = () => {\n    if (title.trim() !== \"\") {\n      addItem(title.trim());\n      setTitle(\"\");\n    } else {\n      setError(\"Title is required\");\n    }\n  }\n\n  return (\n    <div>\n      <SingleInput\n        callBack={callBackInput}\n        title={title}\n        setTitle={setTitle}\n        error={error}\n        setError={setError}\n      />\n      <Button callBack={callBackInput}>{buttonName}</Button>\n    </div>\n\n  )\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\n\ntype EditableSpanPropsType = {\n  title: string\n  callBack: (title: string) => void\n}\n\nexport const EditableSpan = (props: EditableSpanPropsType) => {\n  const [editMode, setEditMode] = useState(false)\n  const [value, setValue] = useState('')\n\n  const activateEditMode = () => {\n    setEditMode(true)\n    setValue(props.title)\n  }\n  const deActivateEditMode = () => setEditMode(false)\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => setValue(e.currentTarget.value)\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.charCode === 13) {\n      if (value) {\n        props.callBack(value);\n        deActivateEditMode()\n      }\n    }\n  }\n\n  return (\n    editMode ?\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        onDoubleClick={deActivateEditMode}\n        onBlur={deActivateEditMode}\n        onKeyPress={onKeyPressHandler}\n        autoFocus\n      /> :\n      <span onDoubleClick={activateEditMode}>{props.title}</span>\n  )\n}","import {v1} from \"uuid\";\nimport {FilterValuesType} from \"./FilterReducer\";\n\nexport type TodolistsType = {\n  id: string, title: string, filter: FilterValuesType\n}\n\nconst REMOVE_TODO_LIST = 'REMOVE_TODO_LIST'\nconst CHANGE_TODO_LIST_TITLE = 'CHANGE_TODO_LIST_TITLE'\nconst CHANGE_FILTER = 'CHANGE_FILTER'\nconst ADD_TODO_LIST = 'ADD_TODO_LIST'\n\nexport const todolistID1 = v1();\nexport const todolistID2 = v1();\n\nconst initialState: Array<TodolistsType> = [\n  {id: todolistID1, title: 'What to learn', filter: 'all'},\n  {id: todolistID2, title: 'What to buy', filter: 'all'},\n]\n\nexport const TodoListsReducer = (state: Array<TodolistsType> = initialState, action: ActionsType): Array<TodolistsType> => {\n  switch (action.type) {\n    case REMOVE_TODO_LIST:\n      return state.filter(f => f.id !== action.todolistID)\n    case CHANGE_TODO_LIST_TITLE:\n      return state.map(m => m.id === action.todolistID ? {...m, title: action.title} : m)\n    case CHANGE_FILTER:\n      return state.map(m => m.id === action.todolistID ? {...m, filter: action.value} : m)\n    case ADD_TODO_LIST:\n      return [{id: action.newTodolistID, title: action.title, filter: 'all'}, ...state]\n    default:\n      return state\n  }\n}\n\ntype ActionsType =\n  RemoveTodolistActionType\n  | ChangeTodoListTitleActionType\n  | ChangeFilterActionType\n  | AddTodoListActionType\ntype RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\ntype ChangeTodoListTitleActionType = ReturnType<typeof changeTodoListTitleAC>\ntype ChangeFilterActionType = ReturnType<typeof changeFilterAC>\ntype AddTodoListActionType = ReturnType<typeof addTodoListAC>\n\nexport const removeTodolistAC = (todolistID: string) => {\n  return {\n    type: REMOVE_TODO_LIST, todolistID\n  } as const\n}\nexport const changeTodoListTitleAC = (todolistID: string, title: string) => {\n  return {\n    type: CHANGE_TODO_LIST_TITLE, todolistID, title\n  } as const\n}\nexport const changeFilterAC = (todolistID: string, value: FilterValuesType) => {\n  return {\n    type: CHANGE_FILTER, todolistID, value\n  } as const\n}\nexport const addTodoListAC = (newTodolistID: string, title: string) => {\n  return {\n    type: ADD_TODO_LIST, newTodolistID, title\n  } as const\n}\n\n","import {v1} from \"uuid\";\nimport {todolistID1, todolistID2} from \"./TodoListsReducer\";\nimport {TaskType} from \"../Todolist\";\n\nexport type TasksType = {\n  [key: string]: Array<TaskType>\n}\n\nconst REMOVE_TASK = 'REMOVE_TASK'\nconst ADD_TASK = 'ADD_TASK'\nconst CHANGE_STATUS = 'CHANGE_STATUS'\nconst CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE'\nconst ADD_EMPTY_ARRAY_INSTEAD_TASK = 'ADD_EMPTY_ARRAY_INSTEAD_TASK'\n\nconst initialState: TasksType = {\n  [todolistID1]: [\n    {id: v1(), title: \"HTML&CSS\", isDone: true},\n    {id: v1(), title: \"JS\", isDone: true},\n    {id: v1(), title: \"ReactJS\", isDone: false},\n    {id: v1(), title: \"Rest API\", isDone: false},\n    {id: v1(), title: \"GraphQL\", isDone: false},\n  ],\n  [todolistID2]: [\n    {id: v1(), title: \"Meat\", isDone: true},\n    {id: v1(), title: \"Sweets\", isDone: true},\n    {id: v1(), title: \"Sugar\", isDone: false},\n    {id: v1(), title: \"Juice\", isDone: false},\n    {id: v1(), title: \"Fruit\", isDone: false},\n  ]\n}\n\nexport const TasksReducer = (state: TasksType = initialState, action: ActionsType): TasksType => {\n  switch (action.type) {\n    case REMOVE_TASK:\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID].filter(f => f.id !== action.taskId)\n      }\n    case ADD_TASK:\n      return {\n        ...state,\n        [action.todolistID]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistID]]\n      }\n    case CHANGE_STATUS:\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID]\n          .map(m => m.id === action.taskId ? {...m, isDone: action.isDone} : m)\n      }\n    case CHANGE_TASK_TITLE:\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID].map(m => m.id === action.taskId ? {...m, title: action.title} : m)\n      }\n    case ADD_EMPTY_ARRAY_INSTEAD_TASK:\n      return {\n        ...state,\n        [action.newTodolistID]: []\n      }\n    default:\n      return state\n  }\n}\n\ntype ActionsType =\n  RemoveTaskActionType\n  | AddTaskActionType\n  | ChangeStatusActionType\n  | ChangeTaskTitleActionType\n  | AddEmptyArrayInsteadTaskActionType\n\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\ntype ChangeStatusActionType = ReturnType<typeof changeStatusAC>\ntype ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\ntype AddEmptyArrayInsteadTaskActionType = ReturnType<typeof addEmptyArrayInsteadTaskAC>\n\nexport const removeTaskAC = (todolistID: string, taskId: string) => {\n  return {\n    type: REMOVE_TASK, todolistID, taskId\n  } as const\n}\nexport const addTaskAC = (todolistID: string, title: string) => {\n  return {\n    type: ADD_TASK, todolistID, title\n  } as const\n}\nexport const changeStatusAC = (todolistID: string, taskId: string, isDone: boolean) => {\n  return {\n    type: CHANGE_STATUS,\n    todolistID, taskId, isDone\n  } as const\n}\nexport const changeTaskTitleAC = (todolistID: string, taskId: string, title: string) => {\n  return {\n    type: CHANGE_TASK_TITLE, todolistID, taskId, title\n  } as const\n}\nexport const addEmptyArrayInsteadTaskAC = (newTodolistID: string) => {\n  return {\n    type: ADD_EMPTY_ARRAY_INSTEAD_TASK, newTodolistID\n  } as const\n}","import React, {ChangeEvent} from 'react';\r\nimport {Button} from \"./components/Button\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {FilterValuesType} from \"./Reducers/FilterReducer\";\r\nimport {addTaskAC, changeStatusAC, changeTaskTitleAC, removeTaskAC} from \"./Reducers/TasksReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeFilterAC, changeTodoListTitleAC, removeTodolistAC, TodolistsType} from \"./Reducers/TodoListsReducer\";\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\nexport type ErrorType = string | null\r\ntype PropsType = {\r\n  todolist: TodolistsType\r\n  tasks: Array<TaskType>\r\n}\r\n\r\nexport function Todolist({todolist, tasks}: PropsType) {\r\n  const dispatch = useDispatch()\r\n\r\n  const changeFilterForButton = (filter: FilterValuesType) => {\r\n    dispatch(changeFilterAC(todolist.id, filter))\r\n  }\r\n  const callBackHandlerForTodolistRemove = () => {\r\n    dispatch(removeTodolistAC(todolist.id))\r\n  }\r\n  const addTask = (title: string) => {\r\n    dispatch(addTaskAC(todolist.id, title))\r\n  }\r\n  const changeTodoListTitle = (title: string) => {\r\n    dispatch(changeTodoListTitleAC(todolist.id, title))\r\n  }\r\n  const classNameButton = (filter: FilterValuesType) => {\r\n    if (todolist.filter === filter) {\r\n      return \"active-filter\"\r\n    } else {\r\n      return \"\"\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan title={todolist.title} callBack={changeTodoListTitle}/>\r\n        <Button callBack={callBackHandlerForTodolistRemove}>x</Button>\r\n      </h3>\r\n      <AddItemForm addItem={addTask} buttonName={\"Add task\"}/>\r\n      <ul>\r\n        {\r\n          tasks.map(task => {\r\n            const callBackHandlerForRemoveTask = () => {\r\n              dispatch(removeTaskAC(todolist.id, task.id))\r\n            }\r\n            const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n              dispatch(changeStatusAC(todolist.id, task.id, e.currentTarget.checked))\r\n            }\r\n            const changeTaskTitle = (title: string) => {\r\n              dispatch(changeTaskTitleAC(todolist.id, task.id, title))\r\n            }\r\n\r\n            return <li key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\r\n              <input type=\"checkbox\" onChange={onChangeHandler} checked={task.isDone}/>\r\n              <EditableSpan title={task.title} callBack={changeTaskTitle}/>\r\n              <Button callBack={callBackHandlerForRemoveTask}>x</Button>\r\n            </li>\r\n          })\r\n        }\r\n      </ul>\r\n      <div>\r\n        <Button\r\n          className={classNameButton('all')}\r\n          callBack={() => changeFilterForButton(\"all\")}>All</Button>\r\n        <Button\r\n          className={classNameButton('active')}\r\n          callBack={() => changeFilterForButton(\"active\")}>Active</Button>\r\n        <Button\r\n          className={classNameButton('completed')}\r\n          callBack={() => changeFilterForButton(\"completed\")}>Completed</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {addEmptyArrayInsteadTaskAC, TasksType} from \"./Reducers/TasksReducer\";\r\nimport {addTodoListAC, TodolistsType} from \"./Reducers/TodoListsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./Store/Store\";\r\n\r\nexport const App = () => {\r\n  const todolists = useSelector<RootReducerType, Array<TodolistsType>>(state => state.todolists)\r\n  const tasks = useSelector<RootReducerType, TasksType>(state => state.tasks)\r\n\r\n  const dispatch = useDispatch()\r\n  const addTodoList = (title: string) => {\r\n    const newTodolistID = v1()\r\n    dispatch(addTodoListAC(newTodolistID, title))\r\n    dispatch(addEmptyArrayInsteadTaskAC(newTodolistID))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AddItemForm addItem={addTodoList} buttonName={'Add todolist'}/>\r\n      <div className={\"todos-wrapper\"}>\r\n        {todolists.map(todolist => {\r\n          let tasksForTodolist = tasks[todolist.id];\r\n\r\n          if (todolist.filter === \"active\") {\r\n            tasksForTodolist = tasks[todolist.id].filter(t => !t.isDone);\r\n          }\r\n          if (todolist.filter === \"completed\") {\r\n            tasksForTodolist = tasks[todolist.id].filter(t => t.isDone);\r\n          }\r\n\r\n          return (\r\n            <Todolist key={todolist.id} todolist={todolist} tasks={tasksForTodolist}/>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\nimport {TodoListsReducer} from \"../Reducers/TodoListsReducer\";\nimport {TasksReducer} from \"../Reducers/TasksReducer\";\nimport {FilterReducer} from \"../Reducers/FilterReducer\";\n\nconst rootReducer = combineReducers({\n  todolists: TodoListsReducer,\n  tasks: TasksReducer,\n  filter: FilterReducer\n})\n\nexport type RootReducerType = ReturnType<typeof rootReducer>\nexport const store = createStore(rootReducer)","export type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nconst initialState: FilterValuesType = 'all'\r\n\r\nexport const FilterReducer = (state: FilterValuesType = initialState, action: ActionsType): FilterValuesType => {\r\n    switch (action.type) {\r\n        case 'SET-FILTER': {\r\n            return action.value;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ActionsType = setFilterActionType\r\nexport type setFilterActionType = ReturnType<typeof setFilterAC>\r\n\r\nexport const setFilterAC = (value: FilterValuesType) => {\r\n    return {\r\n        type: 'SET-FILTER',\r\n        value\r\n    } as const\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./Store/Store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}><App /></Provider>,\r\n  document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}