{"version":3,"sources":["components/Commons/Button.tsx","components/Commons/SingleInput.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","Reducers/TodoListsReducer.ts","Reducers/TasksReducer.ts","components/Task/Task.tsx","components/Todolist.tsx","App.tsx","serviceWorker.ts","Store/Store.ts","index.tsx"],"names":["Button","callBack","props","onClick","SingleInput","title","setTitle","error","setError","type","value","onChange","e","currentTarget","onKeyPress","charCode","className","AddItemForm","React","memo","addItem","buttonName","console","log","useState","callBackInput","trim","EditableSpan","editMode","setEditMode","setValue","deActivateEditMode","onDoubleClick","onBlur","autoFocus","initialState","Task","todolistId","task","dispatch","useDispatch","removeTask","useCallback","todolistID","taskId","id","changeTaskTitle","changeTaskTitleAC","key","isDone","checked","Todolist","todolist","tasks","useSelector","state","removeTodolist","addTask","addTaskAC","changeTodolistTitle","changeTodolistTitleAC","changeFilter","filter","classNameBtn","onClickAllBtnHandler","onClickActiveBtnHandler","onClickCompletedBtnHandler","tasksForTodolist","t","MappedTasks","map","App","todolists","addTodolist","action","v1","addTodolistAC","Boolean","window","location","hostname","match","rootReducer","combineReducers","f","m","stateCopy","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2e1e0e0f.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\ntype PropsType = DefaultButtonPropsType & {\r\n  callBack: () => void\r\n}\r\n\r\nexport const Button = ({callBack, ...props}: PropsType) => {\r\n  const onClickHandler = () => {\r\n    callBack()\r\n  }\r\n  return (\r\n    <button onClick={onClickHandler} {...props} />\r\n  )\r\n}","import React, {ChangeEvent, KeyboardEvent} from 'react';\nimport {ErrorType} from \"../AddItemForm/AddItemForm\";\n\ntype PropsType = {\n  title: string\n  setTitle: (title: string) => void\n  callBack: () => void\n  error: ErrorType\n  setError: (error: ErrorType) => void\n}\n\nexport const SingleInput = ({title, setTitle, callBack, error, setError}: PropsType) => {\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value)\n  }\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    setError(null);\n    if (e.charCode === 13) {\n      callBack();\n    }\n  }\n\n  return (\n    <div>\n      <input type=\"text\"\n             value={title}\n             onChange={onChangeHandler}\n             onKeyPress={onKeyPressHandler}\n             className={error ? \"error\" : \"\"}\n      />\n      {error && <div className=\"error-message\">{error}</div>}\n    </div>\n  )\n}","import React, {useState} from \"react\";\nimport {SingleInput} from \"../Commons/SingleInput\";\nimport {Button} from \"../Commons/Button\";\n\nexport type ErrorType = string | null\ntype PropsType = {\n  addItem: (title: string) => void\n  buttonName: string\n}\n\nexport const AddItemForm = React.memo(({addItem, buttonName}: PropsType) => {\n  console.log('Add item')\n  const [title, setTitle] = useState<string>(\"\")\n  const [error, setError] = useState<ErrorType>(null)\n\n  const callBackInput = () => {\n    if (title.trim() !== \"\") {\n      addItem(title.trim());\n      setTitle(\"\");\n    } else {\n      setError(\"Title is required\");\n    }\n  }\n\n  return (\n    <div>\n      <SingleInput\n        callBack={callBackInput}\n        title={title}\n        setTitle={setTitle}\n        error={error}\n        setError={setError}\n      />\n      <Button callBack={callBackInput}>{buttonName}</Button>\n    </div>\n  )\n})\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\n\ntype EditableSpanPropsType = {\n  title: string\n  callBack: (title: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  console.log('EditableSpan')\n  const [editMode, setEditMode] = useState(false)\n  const [value, setValue] = useState('')\n\n  const activateEditMode = () => {\n    setEditMode(true)\n    setValue(props.title)\n  }\n  const deActivateEditMode = () => setEditMode(false)\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => setValue(e.currentTarget.value)\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.charCode === 13) {\n      if (value) {\n        props.callBack(value);\n        deActivateEditMode()\n      }\n    }\n  }\n\n  return (\n    editMode ?\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        onDoubleClick={deActivateEditMode}\n        onBlur={deActivateEditMode}\n        onKeyPress={onKeyPressHandler}\n        autoFocus\n      /> :\n      <span onDoubleClick={activateEditMode}>{props.title}</span>\n  )\n})","import {v1} from \"uuid\";\n\nexport type TodolistsType = {\n  id: string, title: string, filter: FilterValuesType\n}\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n// export type FilterValuesType = typeof filterValues\n//\n// export const filterValues = {\n//   all: \"all\",\n//   active: \"active\",\n//   completed: \"completed\",\n// }\n\nexport const REMOVE_TODO_LIST = 'REMOVE_TODO_LIST'\nexport const ADD_TODO_LIST = 'ADD_TODO_LIST'\nconst CHANGE_TODO_LIST_TITLE = 'CHANGE_TODO_LIST_TITLE'\nconst CHANGE_FILTER = 'CHANGE_FILTER'\n\n// export const todolistID1 = v1();\n// export const todolistID2 = v1();\n\nconst initialState: Array<TodolistsType> = [\n  // {id: todolistID1, title: 'What to learn', filter: 'all'},\n  // {id: todolistID2, title: 'What to buy', filter: 'all'},\n]\n\nexport const TodoListsReducer = (state: Array<TodolistsType> = initialState, action: ActionsType): Array<TodolistsType> => {\n  switch (action.type) {\n    case REMOVE_TODO_LIST:\n      return state.filter(f => f.id !== action.todolistID)\n    case CHANGE_TODO_LIST_TITLE:\n      return state.map(m => m.id === action.todolistID ? {...m, title: action.title} : m)\n    case CHANGE_FILTER:\n      return state.map(m => m.id === action.todolistID ? {...m, filter: action.value} : m)\n    case ADD_TODO_LIST:\n      return [{id: action.todolistID, title: action.title, filter: 'all'}, ...state]\n    default:\n      return state\n  }\n}\n\ntype ActionsType =\n  RemoveTodolistActionType\n  | ChangeTodolistTitleActionType\n  | ChangeFilterActionType\n  | AddTodolistActionType\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\ntype ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\ntype ChangeFilterActionType = ReturnType<typeof changeFilterAC>\n\nexport const removeTodolistAC = (todolistID: string) => {\n  return {\n    type: REMOVE_TODO_LIST, todolistID\n  } as const\n}\nexport const changeTodolistTitleAC = (todolistID: string, title: string) => {\n  return {\n    type: CHANGE_TODO_LIST_TITLE, todolistID, title\n  } as const\n}\nexport const changeFilterAC = (todolistID: string, value: FilterValuesType) => {\n  return {\n    type: CHANGE_FILTER, todolistID, value\n  } as const\n}\nexport const addTodolistAC = (title: string) => {\n  return {\n    type: ADD_TODO_LIST, title,  todolistID: v1()\n  } as const\n}\n\n","import {v1} from \"uuid\";\nimport {\n  ADD_TODO_LIST, REMOVE_TODO_LIST,\n  // todolistID1, todolistID2,\n  AddTodolistActionType, RemoveTodolistActionType\n} from \"./TodoListsReducer\";\n\nexport type TaskType = {\n  id: string\n  title: string\n  isDone: boolean\n}\nexport type TasksType = {\n  [key: string]: Array<TaskType>\n}\n\nconst REMOVE_TASK = 'REMOVE_TASK'\nconst ADD_TASK = 'ADD_TASK'\nconst CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS'\nconst CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE'\n\nconst initialState: TasksType = {\n  // [todolistID1]: [\n  //   {id: v1(), title: \"HTML&CSS\", isDone: true},\n  //   {id: v1(), title: \"JS\", isDone: true},\n  //   {id: v1(), title: \"ReactJS\", isDone: false},\n  //   {id: v1(), title: \"Rest API\", isDone: false},\n  //   {id: v1(), title: \"GraphQL\", isDone: false},\n  // ],\n  // [todolistID2]: [\n  //   {id: v1(), title: \"Meat\", isDone: true},\n  //   {id: v1(), title: \"Sweets\", isDone: true},\n  //   {id: v1(), title: \"Sugar\", isDone: false},\n  //   {id: v1(), title: \"Juice\", isDone: false},\n  //   {id: v1(), title: \"Fruit\", isDone: false},\n  // ]\n}\n\nexport const TasksReducer = (state: TasksType = initialState, action: ActionsType): TasksType => {\n  switch (action.type) {\n    case REMOVE_TASK:\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID].filter(f => f.id !== action.taskId)\n      }\n    case ADD_TASK:\n      return {\n        ...state,\n        [action.todolistID]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistID]]\n      }\n    case CHANGE_TASK_STATUS:\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID]\n          .map(m => m.id === action.taskId ? {...m, isDone: action.isDone} : m)\n      }\n    case CHANGE_TASK_TITLE:\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID].map(m => m.id === action.taskId ? {...m, title: action.title} : m)\n      }\n    case ADD_TODO_LIST:\n      return {\n        ...state,\n        [action.todolistID]: []\n      }\n    case REMOVE_TODO_LIST:\n      const stateCopy = {...state}\n      delete stateCopy[action.todolistID]\n      return stateCopy\n    default:\n      return state\n  }\n}\n\ntype ActionsType =\n  RemoveTaskActionType\n  | AddTaskActionType\n  | ChangeStatusActionType\n  | ChangeTaskTitleActionType\n  | AddTodolistActionType\n  | RemoveTodolistActionType\n\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\ntype ChangeStatusActionType = ReturnType<typeof changeStatusAC>\ntype ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\n\nexport const removeTaskAC = (todolistID: string, taskId: string) => {\n  return {\n    type: REMOVE_TASK, todolistID, taskId\n  } as const\n}\nexport const addTaskAC = (todolistID: string, title: string) => {\n  return {\n    type: ADD_TASK, todolistID, title\n  } as const\n}\nexport const changeStatusAC = (todolistID: string, taskId: string, isDone: boolean) => {\n  return {\n    type: CHANGE_TASK_STATUS,\n    todolistID, taskId, isDone\n  } as const\n}\nexport const changeTaskTitleAC = (todolistID: string, taskId: string, title: string) => {\n  return {\n    type: CHANGE_TASK_TITLE, todolistID, taskId, title\n  } as const\n}\n","import {changeStatusAC, changeTaskTitleAC, removeTaskAC, TaskType} from \"../../Reducers/TasksReducer\";\nimport {useDispatch} from \"react-redux\";\nimport React, {ChangeEvent, useCallback} from \"react\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button} from \"../Commons/Button\";\n\ntype PropsType = {\n  todolistId: string,\n  task: TaskType\n}\n\nexport const Task = React.memo(({todolistId, task}: PropsType) => {\n  const dispatch = useDispatch()\n\n  const removeTask = useCallback(() => {\n    dispatch(removeTaskAC(todolistId, task.id))\n  }, [dispatch, todolistId, task.id])\n  const changeTaskTitle = useCallback((title: string) => {\n    dispatch(changeTaskTitleAC(todolistId, task.id, title))\n  }, [dispatch, todolistId, task.id])\n  const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(changeStatusAC(todolistId, task.id, e.currentTarget.checked))\n  }\n\n  return (\n    <li key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\n      <input type=\"checkbox\" onChange={onChangeInputHandler} checked={task.isDone}/>\n      <EditableSpan title={task.title} callBack={changeTaskTitle}/>\n      <Button callBack={removeTask}>x</Button>\n    </li>\n  )\n})","import React, {useCallback} from 'react';\r\nimport {Button} from \"./Commons/Button\";\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan/EditableSpan\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskAC, TaskType} from \"../Reducers/TasksReducer\";\r\nimport {\r\n  changeFilterAC, changeTodolistTitleAC, FilterValuesType, removeTodolistAC, TodolistsType\r\n} from \"../Reducers/TodoListsReducer\";\r\nimport {RootReducerType} from \"../Store/Store\";\r\nimport {Task} from \"./Task/Task\";\r\n\r\ntype PropsType = { todolist: TodolistsType }\r\n\r\nexport const Todolist = React.memo(({todolist}: PropsType) => {\r\n  console.log('add Todolist')\r\n  const tasks = useSelector<RootReducerType, Array<TaskType>>(state => state.tasks[todolist.id])\r\n  const dispatch = useDispatch()\r\n\r\n  const removeTodolist = useCallback(() => {\r\n    dispatch(removeTodolistAC(todolist.id))\r\n  }, [dispatch, todolist.id])\r\n  const addTask = useCallback((title: string) => {\r\n    dispatch(addTaskAC(todolist.id, title))\r\n  }, [dispatch, todolist.id])\r\n  const changeTodolistTitle = useCallback((title: string) => {\r\n    dispatch(changeTodolistTitleAC(todolist.id, title))\r\n  }, [dispatch, todolist.id])\r\n  const changeFilter = useCallback((filter: FilterValuesType) => {\r\n    dispatch(changeFilterAC(todolist.id, filter))\r\n  }, [dispatch, todolist.id])\r\n  const classNameBtn = useCallback((filter: FilterValuesType) => {\r\n    if (todolist.filter === filter) {\r\n      return \"active-filter\"\r\n    } else {\r\n      return \"\"\r\n    }\r\n  }, [todolist.filter])\r\n\r\n  const onClickAllBtnHandler = useCallback(() => changeFilter(\"all\"), [changeFilter])\r\n  const onClickActiveBtnHandler = useCallback(() => changeFilter(\"active\"), [changeFilter])\r\n  const onClickCompletedBtnHandler = useCallback(() => changeFilter(\"completed\"), [changeFilter])\r\n\r\n  let tasksForTodolist = [...tasks];\r\n  if (todolist.filter === \"active\") {\r\n    tasksForTodolist = tasks.filter(t => !t.isDone);\r\n  }\r\n  if (todolist.filter === \"completed\") {\r\n    tasksForTodolist = tasks.filter(t => t.isDone);\r\n  }\r\n\r\n  const MappedTasks = React.memo(() => {\r\n    return (\r\n      <ul>\r\n        {tasksForTodolist.map(task =>\r\n          <Task key={task.id} todolistId={todolist.id} task={task}/>\r\n        )}\r\n      </ul>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan title={todolist.title} callBack={changeTodolistTitle}/>\r\n        <Button callBack={removeTodolist}>x</Button>\r\n      </h3>\r\n      <AddItemForm addItem={addTask} buttonName={\"Add task\"}/>\r\n      <MappedTasks/>\r\n      <div>\r\n        <Button className={classNameBtn('all')} callBack={onClickAllBtnHandler}>All</Button>\r\n        <Button className={classNameBtn('active')} callBack={onClickActiveBtnHandler}>Active</Button>\r\n        <Button className={classNameBtn('completed')} callBack={onClickCompletedBtnHandler}>Completed</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './components/Todolist';\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\nimport {addTodolistAC, TodolistsType,} from \"./Reducers/TodoListsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./Store/Store\";\r\n\r\nfunction App() {\r\n  const todolists = useSelector<RootReducerType, Array<TodolistsType>>(state => state.todolists)\r\n  const dispatch = useDispatch()\r\n  const addTodolist = useCallback((title: string) => {\r\n    const action = addTodolistAC(title)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  console.log('add App')\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AddItemForm addItem={addTodolist} buttonName={'Add todolist'}/>\r\n      <div className={\"todos-wrapper\"}>\r\n        {todolists.map(todolist => <Todolist key={todolist.id} todolist={todolist}/>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\nimport {TasksReducer} from \"../Reducers/TasksReducer\";\nimport {TodoListsReducer} from \"../Reducers/TodoListsReducer\";\n\nexport type RootReducerType = ReturnType<typeof rootReducer>\n\nconst rootReducer = combineReducers({\n  todolists: TodoListsReducer,\n  tasks: TasksReducer\n})\n\nexport const store = createStore(rootReducer)\n\n// @ts-ignore\n// window.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Store/Store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}><App/></Provider>\r\n  , document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}