{"version":3,"sources":["components/Button.tsx","components/SingleInput.tsx","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","Reducers/TasksReducer.ts","Reducers/TodoListsReducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","callBack","props","onClick","SingleInput","title","setTitle","error","setError","type","value","onChange","e","currentTarget","onKeyPress","charCode","className","AddItemForm","addItem","buttonName","useState","callBackInput","trim","EditableSpan","editMode","setEditMode","setValue","deActivateEditMode","onDoubleClick","onBlur","autoFocus","Todolist","todolistID","tasks","changeFilter","removeTodolist","removeTask","changeTaskStatus","changeFilterForButton","filter","classNameButton","changeTodoListTitle","addTask","map","t","key","id","isDone","checked","changeTaskTitle","TasksReducer","state","action","f","taskId","v1","m","todolist","TodoListsReducer","App","todolistID1","todolistID2","useReducer","todolists","dispatchTodolists","dispatchTasks","console","log","RemoveTodolistAC","ChangeTodoListTitleAC","RemoveTaskAC","AddTaskAC","changeStatus","ChangeStatusAC","ChangeFilterAC","ChangeTaskTitleAC","AddTodoListForTodoListsReducerAC","AddTodoListForTasksReducerAC","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fdae10dc.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\ntype propsType = DefaultButtonPropsType & {\r\n    callBack: () => void\r\n}\r\n\r\nexport const Button=({callBack, ...props}:propsType)=>{\r\n    const onClickHandler=()=>{\r\n        callBack()\r\n    }\r\n    return(\r\n        <button onClick={onClickHandler} {...props} />\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent} from 'react';\nimport {ErrorType} from \"../Todolist\";\n\ntype InputPropsType = {\n  title: string\n  setTitle: (title: string) => void\n  callBack: () => void\n  error: ErrorType\n  setError: (error: ErrorType) => void\n}\n\nexport const SingleInput = ({title, setTitle, callBack, error, setError}:InputPropsType) => {\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value)\n  }\n\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    setError(null);\n    if (e.charCode === 13) {\n      callBack();\n    }\n  }\n\n  return (\n    <div>\n      <input type=\"text\"\n             value={title}\n             onChange={onChangeHandler}\n             onKeyPress={onKeyPressHandler}\n             className={error ? \"error\" : \"\"}\n      />\n      {error && <div className=\"error-message\">{error}</div>}\n    </div>\n  )\n}","import React, {useState} from \"react\";\nimport {SingleInput} from \"./components/SingleInput\";\nimport {Button} from \"./components/Button\";\nimport {ErrorType} from \"./Todolist\";\n\ntype AddItemFormPropsType = {\n  addItem: (title: string) => void\n  buttonName: string\n}\n\nexport const AddItemForm = ({addItem, buttonName}: AddItemFormPropsType) => {\n  let [title, setTitle] = useState<string>(\"\")\n  let [error, setError] = useState<ErrorType>(null)\n\n  const callBackInput = () => {\n    if (title.trim() !== \"\") {\n      addItem(title.trim());\n      setTitle(\"\");\n    } else {\n      setError(\"Title is required\");\n    }\n  }\n\n  return (\n    <div>\n      <SingleInput\n        callBack={callBackInput}\n        title={title}\n        setTitle={setTitle}\n        error={error}\n        setError={setError}\n      />\n      <Button callBack={callBackInput}>{buttonName}</Button>\n    </div>\n\n  )\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\n\ntype EditableSpanPropsType = {\n  title: string\n  callBack: (title: string) => void\n}\n\nexport const EditableSpan = (props: EditableSpanPropsType) => {\n  const [editMode, setEditMode] = useState(false)\n  const [value, setValue] = useState('')\n\n  const activateEditMode = () => {\n    setEditMode(true)\n    setValue(props.title)\n  }\n  const deActivateEditMode = () => setEditMode(false)\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => setValue(e.currentTarget.value)\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.charCode === 13) {\n      if (value) {\n        props.callBack(value);\n        deActivateEditMode()\n      }\n    }\n  }\n\n  return (\n    editMode ?\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        onDoubleClick={deActivateEditMode}\n        onBlur={deActivateEditMode}\n        onKeyPress={onKeyPressHandler}\n        autoFocus\n      /> :\n      <span onDoubleClick={activateEditMode}>{props.title}</span>\n  )\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {Button} from \"./components/Button\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\nexport type ErrorType = string | null\r\ntype PropsType = {\r\n  todolistID: string\r\n  title: string\r\n  removeTodolist: (todolistID: string) => void\r\n  tasks: Array<TaskType>\r\n  removeTask: (todolistID: string, taskId: string) => void\r\n  changeFilter: (todolistID: string, value: FilterValuesType) => void\r\n  addTask: (todolistID: string, title: string) => void\r\n  changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n  filter: FilterValuesType\r\n  changeTaskTitle: (todolistID: string, taskId: string, title: string) => void\r\n  changeTodoListTitle: (todolistID: string, title: string) => void\r\n}\r\n\r\nexport function Todolist({\r\n                           todolistID,\r\n                           tasks,\r\n                           changeFilter,\r\n                           removeTodolist,\r\n                           removeTask,\r\n                           changeTaskStatus,\r\n                           ...props\r\n                         }: PropsType) {\r\n  const changeFilterForButton = (filter: FilterValuesType) => {\r\n    changeFilter(todolistID, filter)\r\n  }\r\n\r\n  const callBackHandlerForTodolistRemove = () => {\r\n    removeTodolist(todolistID)\r\n  }\r\n\r\n  const classNameButton = (filter: FilterValuesType) => {\r\n    if(props.filter === filter) {\r\n      return \"active-filter\"\r\n    } else {\r\n      return \"\"\r\n    }\r\n  }\r\n\r\n  const addTask = (title: string) => {\r\n    props.addTask(todolistID, title)\r\n  }\r\n\r\n  const changeTodoListTitle = (title: string) => {\r\n    props.changeTodoListTitle(todolistID, title)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        {/*{props.title}*/}\r\n        <EditableSpan title={props.title} callBack={changeTodoListTitle}/>\r\n        <Button callBack={callBackHandlerForTodolistRemove}>x</Button>\r\n      </h3>\r\n      <AddItemForm addItem={addTask} buttonName={\"Add task\"}/>\r\n      <ul>\r\n        {\r\n          tasks.map(t => {\r\n            const callBackHandlerForRemoveTask = () => {\r\n              removeTask(todolistID, t.id)\r\n            }\r\n            const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n              changeTaskStatus(todolistID, t.id, e.currentTarget.checked);\r\n            }\r\n\r\n            const changeTaskTitle = (title: string) => {\r\n              props.changeTaskTitle(todolistID, t.id, title)\r\n            }\r\n\r\n            return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n              <input type=\"checkbox\"\r\n                     onChange={onChangeHandler}\r\n                     checked={t.isDone}/>\r\n              <EditableSpan title={t.title} callBack={changeTaskTitle}/>\r\n              <Button callBack={callBackHandlerForRemoveTask}>x</Button>\r\n            </li>\r\n          })\r\n        }\r\n      </ul>\r\n      <div>\r\n        <Button\r\n          className={classNameButton('all')}\r\n          callBack={() => changeFilterForButton(\"all\")}\r\n        >All</Button>\r\n        <Button\r\n          className={classNameButton('active')}\r\n          callBack={() => changeFilterForButton(\"active\")}>Active</Button>\r\n        <Button\r\n          className={classNameButton('completed')}\r\n          callBack={() => changeFilterForButton(\"completed\")}\r\n        >Completed</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import {TasksType, TodolistsType} from \"../App\";\nimport {v1} from \"uuid\";\n\nexport const TasksReducer = (state: TasksType, action: CommonACType) => {\n  switch (action.type) {\n    case 'REMOVE_TASK': {\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID].filter(f => f.id !== action.taskId)\n      }\n    }\n    case 'ADD_TASK': {\n      return {\n        ...state,\n        [action.todolistID]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistID]]\n      }\n    }\n    case 'CHANGE_STATUS': {\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID]\n          .map(m => m.id === action.taskId ? {...m, isDone: action.isDone} : m)\n      }\n    }\n    case 'CHANGE_TASK_TITLE': {\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID].map(m => m.id===action.taskId ? {...m, title: action.title} : m)\n      }\n    }\n    case 'ADD_TODO_LIST': {\n      return {\n        ...state, [action.todolist.id]: []\n\n      }\n    }\n    default:\n      return state\n  }\n}\n\ntype CommonACType = RemoveTaskACType | AddTaskACType | ChangeStatusACType | ChangeTaskTitleACType | AddTodoListForTasksReducerACType\n\ntype RemoveTaskACType = ReturnType<typeof RemoveTaskAC>\nexport const RemoveTaskAC = (todolistID: string, taskId: string) => {\n  return {\n    type: 'REMOVE_TASK',\n    todolistID,\n    taskId\n  } as const\n}\n\ntype AddTaskACType = ReturnType<typeof AddTaskAC>\nexport const AddTaskAC = (todolistID: string, title: string) => {\n  return {\n    type: 'ADD_TASK', todolistID, title\n  } as const\n}\n\ntype ChangeStatusACType = ReturnType<typeof ChangeStatusAC>\nexport const ChangeStatusAC = (todolistID: string, taskId: string, isDone: boolean) => {\n  return {\n    type: 'CHANGE_STATUS',\n    todolistID, taskId, isDone\n  } as const\n}\n\ntype ChangeTaskTitleACType = ReturnType<typeof ChangeTaskTitleAC>\nexport const ChangeTaskTitleAC = (todolistID: string, taskId: string, title: string) => {\n  return {\n    type: 'CHANGE_TASK_TITLE', todolistID, taskId, title\n  } as const\n}\n\ntype AddTodoListForTasksReducerACType = ReturnType<typeof AddTodoListForTasksReducerAC>\nexport const AddTodoListForTasksReducerAC = (todolist: TodolistsType) => {\n  return {\n    type: 'ADD_TODO_LIST', todolist\n  } as const\n}","import {FilterValuesType, TodolistsType} from \"../App\";\n\nexport const TodoListsReducer = (state: Array<TodolistsType>, action: CommonACType) => {\n  switch (action.type) {\n    case 'REMOVE_TODO_LIST': {\n      return state.filter(f => f.id !== action.todolistID)\n    }\n    case 'CHANGE_TODO_LIST_TITLE': {\n      return state.map(m => m.id === action.todolistID ? {...m, title: action.title} : m)\n    }\n    case 'CHANGE_FILTER': {\n      return state.map(m => m.id === action.todolistID ? {...m, filter: action.value} : m)\n    }\n    case 'ADD_TODO_LIST': {\n      return [action.todolist, ...state]\n    }\n\n      default:\n        return state\n  }\n}\n\ntype CommonACType = RemoveTodolistACType | ChangeTodoListTitleACType | ChangeFilterACType | AddTodoListForTodoListsReducerACType\n\ntype RemoveTodolistACType = ReturnType<typeof RemoveTodolistAC>\nexport const RemoveTodolistAC = (todolistID: string) => {\n  return {\n    type: 'REMOVE_TODO_LIST', todolistID\n  } as const\n}\n\ntype ChangeTodoListTitleACType = ReturnType<typeof ChangeTodoListTitleAC>\nexport const ChangeTodoListTitleAC = (todolistID: string, title: string) => {\n  return {\n    type: 'CHANGE_TODO_LIST_TITLE', todolistID, title\n  } as const\n}\n\ntype ChangeFilterACType = ReturnType<typeof ChangeFilterAC>\nexport const ChangeFilterAC = (todolistID: string, value: FilterValuesType) => {\n  return {\n    type: 'CHANGE_FILTER', todolistID, value\n  } as const\n}\n\ntype AddTodoListForTodoListsReducerACType = ReturnType<typeof AddTodoListForTodoListsReducerAC>\nexport const AddTodoListForTodoListsReducerAC = (todolist: TodolistsType) => {\n  return {\n    type: 'ADD_TODO_LIST', todolist\n  } as const\n}","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {\r\n  AddTaskAC,\r\n  AddTodoListForTasksReducerAC,\r\n  ChangeStatusAC,\r\n  ChangeTaskTitleAC,\r\n  RemoveTaskAC,\r\n  TasksReducer\r\n} from \"./Reducers/TasksReducer\";\r\nimport {\r\n  AddTodoListForTodoListsReducerAC,\r\n  ChangeFilterAC,\r\n  ChangeTodoListTitleAC,\r\n  RemoveTodolistAC,\r\n  TodoListsReducer\r\n} from \"./Reducers/TodoListsReducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistsType = {\r\n  id: string, title: string, filter: FilterValuesType\r\n}\r\nexport type TasksType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n  let todolistID1 = v1();\r\n  let todolistID2 = v1();\r\n\r\n  let [todolists, dispatchTodolists] = useReducer(TodoListsReducer,[\r\n    {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n    {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n  ])\r\n\r\n  let [tasks, dispatchTasks] = useReducer(TasksReducer,{\r\n    [todolistID1]: [\r\n      {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n      {id: v1(), title: \"JS\", isDone: true},\r\n      {id: v1(), title: \"ReactJS\", isDone: false},\r\n      {id: v1(), title: \"Rest API\", isDone: false},\r\n      {id: v1(), title: \"GraphQL\", isDone: false},\r\n    ],\r\n    [todolistID2]: [\r\n      {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n      {id: v1(), title: \"JS2\", isDone: true},\r\n      {id: v1(), title: \"ReactJS2\", isDone: false},\r\n      {id: v1(), title: \"Rest API2\", isDone: false},\r\n      {id: v1(), title: \"GraphQL2\", isDone: false},\r\n    ]\r\n  });\r\n\r\n  console.log(todolists)\r\n\r\n  const addTodoList = (title: string) => {\r\n     let todolist: TodolistsType = {id: v1(), title: title, filter: 'all'}\r\n    dispatchTodolists(AddTodoListForTodoListsReducerAC(todolist))\r\n    dispatchTasks(AddTodoListForTasksReducerAC(todolist))\r\n\r\n    //  let todolist: TodolistsType = {id: v1(), title: title, filter: 'all'}\r\n    // setTodolists([todolist, ...todolists])\r\n    // setTasks({...tasks, [todolist.id]: []\r\n    // })\r\n  }\r\n\r\n  const removeTodolist = (todolistID: string) => {\r\n    dispatchTodolists(RemoveTodolistAC(todolistID))\r\n    // setTodolists(todolists.filter(f => f.id !== todolistID))\r\n  }\r\n\r\n  function changeTodoListTitle(todolistID: string, title: string) {\r\n    dispatchTodolists(ChangeTodoListTitleAC(todolistID, title))\r\n    // if(title) setTodolists(todolists.map(m => m.id === todolistID ? {...m, title: title}: m))\r\n  }\r\n\r\n  function removeTask(todolistID: string, id: string) {\r\n    dispatchTasks(RemoveTaskAC(todolistID, id))\r\n    // setTasks({...tasks, [todolistID]: tasks[todolistID].filter(f => f.id !== id)})\r\n  }\r\n\r\n  function addTask(todolistID: string, title: string) {\r\n    dispatchTasks(AddTaskAC(todolistID, title))\r\n    // setTasks({...tasks, [todolistID]: [{id: v1(), title: title, isDone: false}, ...tasks[todolistID]]})\r\n  }\r\n\r\n  function changeStatus(todolistID: string, taskId: string, isDone: boolean) {\r\n    dispatchTasks(ChangeStatusAC(todolistID, taskId, isDone))\r\n    // setTasks({...tasks, [todolistID]: tasks[todolistID].map(m => m.id === taskId ? {...m, isDone: isDone} : m)})\r\n  }\r\n\r\n  function changeFilter(todolistID: string, value: FilterValuesType) {\r\n    debugger\r\n    dispatchTodolists(ChangeFilterAC(todolistID, value))\r\n    // setTodolists(todolists.map(m => m.id === todolistID ? {...m, filter: value} : m))\r\n  }\r\n\r\n  function changeTaskTitle(todolistID: string, taskId: string, title: string) {\r\n    dispatchTasks(ChangeTaskTitleAC(todolistID, taskId, title))\r\n    // setTasks({...tasks, [todolistID]: tasks[todolistID].map(m => m.id === taskId ? {...m, title: title} : m)})\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AddItemForm addItem={addTodoList} buttonName={'Add todolist'}/>\r\n      <div className={\"todos-wrapper\"}>\r\n        {todolists.map(m => {\r\n          let tasksForTodolist = tasks[m.id];\r\n\r\n          if (m.filter === \"active\") {\r\n            tasksForTodolist = tasks[m.id].filter(t => !t.isDone);\r\n          }\r\n          if (m.filter === \"completed\") {\r\n            tasksForTodolist = tasks[m.id].filter(t => t.isDone);\r\n          }\r\n\r\n          return (\r\n            <Todolist\r\n              key={m.id}\r\n              todolistID={m.id}\r\n              removeTodolist={removeTodolist}\r\n              title={m.title}\r\n              tasks={tasksForTodolist}\r\n              removeTask={removeTask}\r\n              changeFilter={changeFilter}\r\n              addTask={addTask}\r\n              changeTaskStatus={changeStatus}\r\n              filter={m.filter}\r\n              changeTaskTitle={changeTaskTitle}\r\n              changeTodoListTitle={changeTodoListTitle}\r\n            />\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}