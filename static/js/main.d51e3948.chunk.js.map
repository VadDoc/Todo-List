{"version":3,"sources":["components/Commons/Button.tsx","components/Commons/SingleInput.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","Reducers/TodoListsReducer.ts","Reducers/TasksReducer.ts","components/Task/Task.tsx","components/Todolist.tsx","App.tsx","serviceWorker.ts","Store/Store.ts","index.tsx"],"names":["Button","React","memo","callBack","props","onClick","SingleInput","title","setTitle","error","setError","type","value","onChange","e","currentTarget","onKeyPress","charCode","className","AddItemForm","addItem","buttonName","console","log","useState","callBackInput","useCallback","trim","EditableSpan","editMode","setEditMode","setValue","deActivateEditMode","onDoubleClick","onBlur","autoFocus","todolistID1","v1","todolistID2","todolistID3","todolistID4","initialState","id","filter","isDone","Task","todolistId","task","dispatch","useDispatch","removeTask","todolistID","taskId","changeTaskTitle","changeTaskTitleAC","checked","Todolist","todolist","tasks","useSelector","state","removeTodolist","addTask","addTaskAC","changeTodolistTitle","changeTodolistTitleAC","changeFilter","classNameBtn","onClickAllBtnHandler","onClickActiveBtnHandler","onClickCompletedBtnHandler","tasksForTodolist","t","MappedTasks","map","key","App","todolists","addTodolist","action","addTodolistAC","Boolean","window","location","hostname","match","rootReducer","combineReducers","f","m","stateCopy","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d51e3948.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\ntype PropsType = DefaultButtonPropsType & {\r\n  callBack: () => void\r\n}\r\n\r\nexport const Button = React.memo(({callBack, ...props}: PropsType) => {\r\n  const onClickHandler = () => {\r\n    callBack()\r\n  }\r\n  return (\r\n    <button onClick={onClickHandler} {...props} />\r\n  )\r\n})","import React, {ChangeEvent, KeyboardEvent} from 'react';\nimport {ErrorType} from \"../AddItemForm/AddItemForm\";\n\ntype PropsType = {\n  title: string\n  setTitle: (title: string) => void\n  callBack: () => void\n  error: ErrorType\n  setError: (error: ErrorType) => void\n}\n\nexport const SingleInput = React.memo(({title, setTitle, callBack, error, setError}: PropsType) => {\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value)\n  }\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n   if (error !== null) setError(null)\n    if (e.charCode === 13) {\n      callBack();\n    }\n  }\n\n  return (\n    <div>\n      <input type=\"text\"\n             value={title}\n             onChange={onChangeHandler}\n             onKeyPress={onKeyPressHandler}\n             className={error ? \"error\" : \"\"}\n      />\n      {error && <div className=\"error-message\">{error}</div>}\n    </div>\n  )\n})","import React, {useCallback, useState} from \"react\";\nimport {SingleInput} from \"../Commons/SingleInput\";\nimport {Button} from \"../Commons/Button\";\n\nexport type ErrorType = string | null\ntype PropsType = {\n  addItem: (title: string) => void\n  buttonName: string\n}\n\nexport const AddItemForm = React.memo(({addItem, buttonName}: PropsType) => {\n  console.log('Add item')\n  const [title, setTitle] = useState<string>(\"\")\n  const [error, setError] = useState<ErrorType>(null)\n\n  const callBackInput = useCallback(() => {\n    if (title.trim() !== \"\") {\n      addItem(title.trim());\n      setTitle(\"\");\n    } else {\n      setError(\"Title is required\");\n    }\n  },[title, addItem])\n\n  return (\n    <div>\n      <SingleInput\n        callBack={callBackInput}\n        title={title}\n        setTitle={setTitle}\n        error={error}\n        setError={setError}\n      />\n      <Button callBack={callBackInput}>{buttonName}</Button>\n    </div>\n  )\n})\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\n\ntype EditableSpanPropsType = {\n  title: string\n  callBack: (title: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  console.log('EditableSpan')\n  const [editMode, setEditMode] = useState(false)\n  const [value, setValue] = useState('')\n\n  const activateEditMode = () => {\n    setEditMode(true)\n    setValue(props.title)\n  }\n  const deActivateEditMode = () => setEditMode(false)\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => setValue(e.currentTarget.value)\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.charCode === 13) {\n      if (value) {\n        props.callBack(value);\n        deActivateEditMode()\n      }\n    }\n  }\n\n  return (\n    editMode ?\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        onDoubleClick={deActivateEditMode}\n        onBlur={deActivateEditMode}\n        onKeyPress={onKeyPressHandler}\n        autoFocus\n      /> :\n      <span onDoubleClick={activateEditMode}>{props.title}</span>\n  )\n})","import {v1} from \"uuid\";\n\nexport type TodolistsType = {\n  id: string, title: string, filter: FilterValuesType\n}\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n// export type FilterValuesType = typeof filterValues\n//\n// export const filterValues = {\n//   all: \"all\",\n//   active: \"active\",\n//   completed: \"completed\",\n// }\n\nexport const REMOVE_TODO_LIST = 'REMOVE_TODO_LIST'\nexport const ADD_TODO_LIST = 'ADD_TODO_LIST'\nconst CHANGE_TODO_LIST_TITLE = 'CHANGE_TODO_LIST_TITLE'\nconst CHANGE_FILTER = 'CHANGE_FILTER'\n\nexport const todolistID1 = v1();\nexport const todolistID2 = v1();\nexport const todolistID3 = v1();\nexport const todolistID4 = v1();\n\nconst initialState: Array<TodolistsType> = [\n  {id: todolistID1, title: 'What to learn', filter: 'all'},\n  {id: todolistID2, title: 'What to buy', filter: 'all'},\n  {id: todolistID3, title: 'What to watch', filter: 'all'},\n  {id: todolistID4, title: 'What to call', filter: 'all'},\n]\n\nexport const TodoListsReducer = (state: Array<TodolistsType> = initialState, action: ActionsType): Array<TodolistsType> => {\n  switch (action.type) {\n    case REMOVE_TODO_LIST:\n      return state.filter(f => f.id !== action.todolistID)\n    case CHANGE_TODO_LIST_TITLE:\n      return state.map(m => m.id === action.todolistID ? {...m, title: action.title} : m)\n    case CHANGE_FILTER:\n      return state.map(m => m.id === action.todolistID ? {...m, filter: action.value} : m)\n    case ADD_TODO_LIST:\n      return [{id: action.todolistID, title: action.title, filter: 'all'}, ...state]\n    default:\n      return state\n  }\n}\n\ntype ActionsType =\n  RemoveTodolistActionType\n  | ChangeTodolistTitleActionType\n  | ChangeFilterActionType\n  | AddTodolistActionType\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\ntype ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\ntype ChangeFilterActionType = ReturnType<typeof changeFilterAC>\n\nexport const removeTodolistAC = (todolistID: string) => {\n  return {\n    type: REMOVE_TODO_LIST, todolistID\n  } as const\n}\nexport const changeTodolistTitleAC = (todolistID: string, title: string) => {\n  return {\n    type: CHANGE_TODO_LIST_TITLE, todolistID, title\n  } as const\n}\nexport const changeFilterAC = (todolistID: string, value: FilterValuesType) => {\n  return {\n    type: CHANGE_FILTER, todolistID, value\n  } as const\n}\nexport const addTodolistAC = (title: string) => {\n  return {\n    type: ADD_TODO_LIST, title,  todolistID: v1()\n  } as const\n}\n\n","import {v1} from \"uuid\";\nimport {\n  ADD_TODO_LIST, REMOVE_TODO_LIST,\n  todolistID1, todolistID2, todolistID3, todolistID4,\n  AddTodolistActionType, RemoveTodolistActionType\n} from \"./TodoListsReducer\";\n\nexport type TaskType = {\n  id: string\n  title: string\n  isDone: boolean\n}\nexport type TasksType = {\n  [key: string]: Array<TaskType>\n}\n\nconst REMOVE_TASK = 'REMOVE_TASK'\nconst ADD_TASK = 'ADD_TASK'\nconst CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS'\nconst CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE'\n\nconst initialState: TasksType = {\n  [todolistID1]: [\n    {id: v1(), title: \"HTML&CSS\", isDone: true},\n    {id: v1(), title: \"JS\", isDone: true},\n    {id: v1(), title: \"ReactJS\", isDone: false},\n    {id: v1(), title: \"Rest API\", isDone: false},\n    {id: v1(), title: \"GraphQL\", isDone: false},\n  ],\n  [todolistID2]: [\n    {id: v1(), title: \"Meat\", isDone: true},\n    {id: v1(), title: \"Sweets\", isDone: true},\n    {id: v1(), title: \"Sugar\", isDone: false},\n    {id: v1(), title: \"Juice\", isDone: false},\n    {id: v1(), title: \"Fruit\", isDone: false},\n  ],\n  [todolistID3]: [\n    {id: v1(), title: \"Twin Peaks\", isDone: true},\n    {id: v1(), title: \"Black Mirror\", isDone: true},\n    {id: v1(), title: \"Breaking Bad\", isDone: false},\n    {id: v1(), title: \"The Crown\", isDone: false},\n    {id: v1(), title: \"Game of Thrones\", isDone: false},\n    {id: v1(), title: \"The Office\", isDone: false},\n  ],\n  [todolistID4]: [\n    {id: v1(), title: \"Ann\", isDone: true},\n    {id: v1(), title: \"Jane\", isDone: true},\n    {id: v1(), title: \"Nick\", isDone: false},\n    {id: v1(), title: \"Kate\", isDone: false},\n    {id: v1(), title: \"Jhon\", isDone: false},\n  ]\n}\n\nexport const TasksReducer = (state: TasksType = initialState, action: ActionsType): TasksType => {\n  switch (action.type) {\n    case REMOVE_TASK:\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID].filter(f => f.id !== action.taskId)\n      }\n    case ADD_TASK:\n      return {\n        ...state,\n        [action.todolistID]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistID]]\n      }\n    case CHANGE_TASK_STATUS:\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID]\n          .map(m => m.id === action.taskId ? {...m, isDone: action.isDone} : m)\n      }\n    case CHANGE_TASK_TITLE:\n      return {\n        ...state,\n        [action.todolistID]: state[action.todolistID].map(m => m.id === action.taskId ? {...m, title: action.title} : m)\n      }\n    case ADD_TODO_LIST:\n      return {\n        ...state,\n        [action.todolistID]: []\n      }\n    case REMOVE_TODO_LIST:\n      const stateCopy = {...state}\n      delete stateCopy[action.todolistID]\n      return stateCopy\n    default:\n      return state\n  }\n}\n\ntype ActionsType =\n  RemoveTaskActionType\n  | AddTaskActionType\n  | ChangeStatusActionType\n  | ChangeTaskTitleActionType\n  | AddTodolistActionType\n  | RemoveTodolistActionType\n\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\ntype ChangeStatusActionType = ReturnType<typeof changeStatusAC>\ntype ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\n\nexport const removeTaskAC = (todolistID: string, taskId: string) => {\n  return {\n    type: REMOVE_TASK, todolistID, taskId\n  } as const\n}\nexport const addTaskAC = (todolistID: string, title: string) => {\n  return {\n    type: ADD_TASK, todolistID, title\n  } as const\n}\nexport const changeStatusAC = (todolistID: string, taskId: string, isDone: boolean) => {\n  return {\n    type: CHANGE_TASK_STATUS,\n    todolistID, taskId, isDone\n  } as const\n}\nexport const changeTaskTitleAC = (todolistID: string, taskId: string, title: string) => {\n  return {\n    type: CHANGE_TASK_TITLE, todolistID, taskId, title\n  } as const\n}\n","import {changeStatusAC, changeTaskTitleAC, removeTaskAC, TaskType} from \"../../Reducers/TasksReducer\";\nimport {useDispatch} from \"react-redux\";\nimport React, {ChangeEvent, useCallback} from \"react\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button} from \"../Commons/Button\";\n\ntype PropsType = {\n  todolistId: string,\n  task: TaskType\n}\n\nexport const Task = React.memo(({todolistId, task}: PropsType) => {\n  const dispatch = useDispatch()\n\n  const removeTask = useCallback(() => {\n    dispatch(removeTaskAC(todolistId, task.id))\n  }, [dispatch, todolistId, task.id])\n  const changeTaskTitle = useCallback((title: string) => {\n    dispatch(changeTaskTitleAC(todolistId, task.id, title))\n  }, [dispatch, todolistId, task.id])\n  const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(changeStatusAC(todolistId, task.id, e.currentTarget.checked))\n  }\n\n  return (\n    <li className={task.isDone ? \"is-done\" : \"\"}>\n      <input type=\"checkbox\" onChange={onChangeInputHandler} checked={task.isDone}/>\n      <EditableSpan title={task.title} callBack={changeTaskTitle}/>\n      <Button callBack={removeTask}>x</Button>\n    </li>\n  )\n})","import React, {useCallback} from 'react';\r\nimport {Button} from \"./Commons/Button\";\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan/EditableSpan\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskAC, TaskType} from \"../Reducers/TasksReducer\";\r\nimport {\r\n  changeFilterAC, changeTodolistTitleAC, FilterValuesType, removeTodolistAC, TodolistsType\r\n} from \"../Reducers/TodoListsReducer\";\r\nimport {RootReducerType} from \"../Store/Store\";\r\nimport {Task} from \"./Task/Task\";\r\n\r\ntype PropsType = { todolist: TodolistsType }\r\n\r\nexport const Todolist = React.memo(({todolist}: PropsType) => {\r\n  console.log('add Todolist')\r\n  const tasks = useSelector<RootReducerType, Array<TaskType>>(state => state.tasks[todolist.id])\r\n  const dispatch = useDispatch()\r\n\r\n  const removeTodolist = useCallback(() => {\r\n    dispatch(removeTodolistAC(todolist.id))\r\n  }, [dispatch, todolist.id])\r\n  const addTask = useCallback((title: string) => {\r\n    dispatch(addTaskAC(todolist.id, title))\r\n  }, [dispatch, todolist.id])\r\n  const changeTodolistTitle = useCallback((title: string) => {\r\n    dispatch(changeTodolistTitleAC(todolist.id, title))\r\n  }, [dispatch, todolist.id])\r\n  const changeFilter = useCallback((filter: FilterValuesType) => {\r\n    dispatch(changeFilterAC(todolist.id, filter))\r\n  }, [dispatch, todolist.id])\r\n  const classNameBtn = useCallback((filter: FilterValuesType) => {\r\n    if (todolist.filter === filter) {\r\n      return \"active-filter\"\r\n    } else {\r\n      return \"\"\r\n    }\r\n  }, [todolist.filter])\r\n\r\n  const onClickAllBtnHandler = useCallback(() => changeFilter(\"all\"), [changeFilter])\r\n  const onClickActiveBtnHandler = useCallback(() => changeFilter(\"active\"), [changeFilter])\r\n  const onClickCompletedBtnHandler = useCallback(() => changeFilter(\"completed\"), [changeFilter])\r\n\r\n  let tasksForTodolist = [...tasks];\r\n  if (todolist.filter === \"active\") {\r\n    tasksForTodolist = tasks.filter(t => !t.isDone);\r\n  }\r\n  if (todolist.filter === \"completed\") {\r\n    tasksForTodolist = tasks.filter(t => t.isDone);\r\n  }\r\n\r\n  const MappedTasks = React.memo(() => {\r\n    return (\r\n      <ul>\r\n        {tasksForTodolist.map(task =>\r\n          <Task key={task.id} todolistId={todolist.id} task={task}/>\r\n        )}\r\n      </ul>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan title={todolist.title} callBack={changeTodolistTitle}/>\r\n        <Button callBack={removeTodolist}>x</Button>\r\n      </h3>\r\n      <AddItemForm addItem={addTask} buttonName={\"Add task\"}/>\r\n      <MappedTasks/>\r\n      <div>\r\n        <Button className={classNameBtn('all')} callBack={onClickAllBtnHandler}>All</Button>\r\n        <Button className={classNameBtn('active')} callBack={onClickActiveBtnHandler}>Active</Button>\r\n        <Button className={classNameBtn('completed')} callBack={onClickCompletedBtnHandler}>Completed</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './components/Todolist';\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\nimport {addTodolistAC, TodolistsType,} from \"./Reducers/TodoListsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./Store/Store\";\r\n\r\nfunction App() {\r\n  const todolists = useSelector<RootReducerType, Array<TodolistsType>>(state => state.todolists)\r\n  const dispatch = useDispatch()\r\n  const addTodolist = useCallback((title: string) => {\r\n    const action = addTodolistAC(title)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  console.log('add App')\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AddItemForm addItem={addTodolist} buttonName={'Add todolist'}/>\r\n      <div className={\"todos-wrapper\"}>\r\n        {todolists.map(todolist => <Todolist key={todolist.id} todolist={todolist}/>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\nimport {TasksReducer} from \"../Reducers/TasksReducer\";\nimport {TodoListsReducer} from \"../Reducers/TodoListsReducer\";\n\nexport type RootReducerType = ReturnType<typeof rootReducer>\n\nconst rootReducer = combineReducers({\n  todolists: TodoListsReducer,\n  tasks: TasksReducer\n})\n\nexport const store = createStore(rootReducer)\n\n// @ts-ignore\n// window.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Store/Store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}><App/></Provider>\r\n  , document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}